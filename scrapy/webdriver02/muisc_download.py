# -*- coding: utf-8 -*-
import sys

# Form implementation generated from reading ui file 'muisc_download.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread
from PyQt5.QtWidgets import QApplication, QWidget, QMessageBox
from selenium import webdriver
from lxml import etree
import requests

headers={}
headers[
    'User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'
headers['Accept-Encoding'] = 'gzip, deflate, br'
headers['Accept-Language'] = 'zh-CN,zh;q=0.9'


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(453, 289)
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(49, 219, 351, 21))
        self.widget.setObjectName("widget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 451, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.textEdit = QtWidgets.QTextEdit(self.horizontalLayoutWidget)
        self.textEdit.setCursorWidth(1)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout.addWidget(self.textEdit)
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton.clicked.connect(self.searchAndDownLoad)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "音乐下载器"))
        self.textEdit.setPlaceholderText(_translate("Form", "请输入您要下载的歌曲的名称"))
        self.pushButton.setText(_translate("Form", "下载"))
    def searchAndDownLoad(self):
        input=self.textEdit.toMarkdown()
        self.work=searchAndDownLoadWork(input)
        self.work.finishsignal.connect(self.finishwork)
        self.work.start()
    def finishwork(self,status):
        if status=='success':
           QMessageBox.about(self, "提示",'下载完毕')
        else:
           QMessageBox.about(self, "提示", '下载失败')


class searchAndDownLoadWork(QThread):
     #添加一个完成工作的信号
     finishsignal = QtCore.pyqtSignal(str)  # 信号要传递的参数类型
     def __init__(self,input):
         super(searchAndDownLoadWork,self).__init__()
         self.input=input
     def run(self):
         #下载的具体的逻辑
         chromedriver=webdriver.Chrome('.chromedriver.exe')
         chromedriver.get(f'https://music.163.com/#/search/m/?s={self.input}')
         chromedriver.switch_to.frame('contentFrame')
         html=chromedriver.page_source
         dom=etree.HTML(html)
         hrefs=dom.xpath('//div[@class="srchsongst"]//div[@class="sn"]//a[1]/@href')
         titles=dom.xpath('//div[@class="srchsongst"]//div[@class="sn"]//b/@title')
         singers=dom.xpath('//div[@class="srchsongst"]//div[@class="td w1"]//a[1]/text()')
         for x in zip(hrefs,titles,singers):
             musicID=x[0].replace('/song?id=','')
             musicNAME=x[1]
             singer=x[2]
             print(musicID)
             saveName=musicNAME+"-"+singer
             print(saveName)

             musicURL = f'https://api.vvhan.com/api/music?id={musicID}&type=song&media=netease'
             music_response = requests.get(musicURL, headers=headers)
             json=music_response.json()
             mp3url=json['mp3url']
             print(mp3url)
             music_real_response=requests.get(mp3url,headers=headers)
             f=open(f'f://music//{saveName}.mp3','wb')
             f.write(music_real_response.content)
             f.close()
         chromedriver.quit()
         self.finishsignal.emit("success")


class DownLoadWork(QThread):
    def __init__(self,musicURL,musicNAME):
        super(DownLoadWork,self).__init__()
        print('我被实例化了...')
        print(musicURL)
        print(musicNAME)
        self.musicURL=musicURL
        self.musicNAME=musicNAME
    def run(self):
        print('开始下载')
        print(self.musicURL)
        print(self.musicNAME)
        music_response=requests.get(self.musicURL,headers=headers)
        f=open(f'F:\\music\\{self.musicNAME}.mp3','wb')
        f.write(music_response.content)
        f.close()
        print('下载完毕')








if __name__ == '__main__':
    app=QApplication(sys.argv)
    window=QWidget()
    UI=Ui_Form()
    UI.setupUi(window)
    window.show();
    sys.exit(app.exec_())
